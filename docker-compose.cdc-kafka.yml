version: '3.3'

services:
  main:
    build: 
      context: ./main/
      dockerfile: Dockerfile
    container_name: image_main
    depends_on:
      dbimg:
        condition: service_healthy
    expose:
      - 8080
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://dbimg:5432/img_dev
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - FRONTEND_URL=http://localhost:8000
  dbimg:
    image: 'postgres:13.1-alpine'
    container_name: dbimg
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=img_dev
    expose:
      - 5432
    healthcheck:
      test: ['CMD', 'psql', '-U', 'admin', 'img_dev', '-c', 'SELECT 1']
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
  frontend:
    container_name: image_frontend
    build: 
      context: ./frontend/
      dockerfile: Dockerfile
    depends_on:
      - main
    ports:
      - "8000:80"
    environment:
      - API_URL=main
      - API_PORT=8080
    command: /bin/sh -c "envsubst '$${API_URL} $${API_PORT}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && nginx -g 'daemon off;'"
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s
  kafka:
    image: confluentinc/cp-kafka:7.3.1
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '29092:29092'
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
  debezium:
    image: debezium/connect:latest
    restart: always
    container_name: debezium
    hostname: debezium
    depends_on:
      dbimg:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - '8083:8083'
    expose:
      - 8083
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
    healthcheck:
      test: ['CMD','curl','--silent','--fail','-X','GET','http://localhost:8083/connectors',]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '8084:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --user superUser:superUser --fail --silent --insecure http://localhost:8081/subjects --output /dev/null || exit 1


  cdc:
    build: 
      context: ./cdc/embedded/images-cdc/
      dockerfile: Dockerfile
    container_name: image_cdc
    depends_on:
      dbimg:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      cassandra-init:
        condition: service_completed_successfully
      debezium:
        condition: service_healthy
    expose:
      - 8080
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=kafka
      - SPRING_CASSANDRA_CONTACTPOINTS=cassandra
      - SPRING_CASSANDRA_PORT=9042
      - SPRING_DATA_CASSANDRA_USERNAME=admin
      - SPRING_DATA_CASSANDRA_PASSWORD=admin
      - SPRING_CASSANDRA_LOCAL-DATACENTER=datacenter1
      - SPRING_CASSANDRA_KEYSPACE-NAME=images_cassandra
  cassandra:
    image: cassandra:latest
    container_name: cassandra-container
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_USER=admin
      - CASSANDRA_PASSWORD=admin
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 10s
      timeout: 5s
      retries: 50
  cassandra-init:
    image: cassandra:latest
    depends_on:
        cassandra:
          condition: service_healthy
    restart: "no"
    entrypoint: ["/usr/bin/bash", "-e", "/init.sh"]
    volumes:
      - ./cdc/embedded/cassandra-config/init.sh:/init.sh:z
  logs:
    container_name: image_logs
    build: 
      context: ./cdc/embedded/images-logs
      dockerfile: Dockerfile
    depends_on:
      - cdc
    ports:
      - "8001:80"
 
  integration:
    build: 
      context: ./cdc/rabbit/integration
      dockerfile: Dockerfile
    container_name: image_integration
    depends_on:
      debezium:
        condition: service_healthy
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PASSWORD=password
      - SPRING_RABBITMQ_USERNAME=rabbit
